<?php

namespace rvilbrandt\lostandfound\Zodiac;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-26 at 16:03:23.
 */
class DateToZodiacConverterTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var DateToZodiacConverter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new DateToZodiacConverter;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    
    public function validProvider() {
        return [
            [
                "05-02",
                "Taurus"
            ],
            [
                "5-2",
                "Taurus"
            ],
            [
                "1982-05-02",
                "Taurus"
            ],
            [
                "1982-5-2",
                "Taurus"
            ]
        ];
    }
    
    public function invalidOutOfBoundsProvider() {
        return [
            [
                "13-01"
            ],
            [
                "00-01"
            ],
            [
                "05-00"
            ],
            [
                "05-32"
            ]
        ];
    }
    
    public function invalidInvalidArgumentProvider() {
        return [
            [
                null
            ],
            [
                "really wrong"
            ],
            [
                5.2
            ],
        ];
    }
    

    /**
     * @covers rvilbrandt\lostandfound\DateToZodiacConverter::convert
     * @dataProvider validProvider
     */
    public function testConvert($strDate, $strZodiac) {
        $this->assertEquals($strZodiac, $this->object->convert($strDate));
    }

    /**
     * @covers rvilbrandt\lostandfound\DateToZodiacConverter::convert
     * @dataProvider invalidOutOfBoundsProvider
     * @expectedException \OutOfBoundsException
     */
    public function testConvertWithOutOfBoundsDates($strDate) {
         $this->object->convert($strDate);
    }

    /**
     * @covers rvilbrandt\lostandfound\DateToZodiacConverter::convert
     * @dataProvider invalidInvalidArgumentProvider
     * @expectedException \InvalidArgumentException
     */
    public function testConvertWithInvalidArgumentDates($strDate) {
         $this->object->convert($strDate);
    }

}
