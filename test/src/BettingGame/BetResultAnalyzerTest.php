<?php

namespace rvilbrandt\lostandfound\BettingGame;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-31 at 12:34:50.
 */
class BetResultAnalyzerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var BetResultAnalyzer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BetResultAnalyzer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    public function validIsExactResultProvider() {
        return [
            [
                1,
                1,
                1,
                1
            ],
            [
                2,
                3,
                2,
                3
            ],
            [
                4,
                0,
                4,
                0
            ],
        ];
    }

    public function invalidIsExactResultProvider() {
        return [
            [
                1,
                1,
                1,
                0
            ],
            [
                2,
                3,
                3,
                2
            ],
            [
                4,
                1,
                4,
                2
            ],
        ];
    }

    public function invalidArgumentResultProvider() {
        return [
            [
                1,
                null
            ],
            [
                null,
                1
            ],
            [
                "1",
                1
            ],
            [
                1.2,
                2
            ],
            [
                -1,
                2
            ],
        ];
    }
    
    public function validIsSameScoreDifferenceProvider() {
        return [
            [
                1,
                2,
                2,
                3
            ],
            [
                6,
                3,
                3,
                0
            ],
            [
                100,
                50,
                150,
                100
            ],
            [
                1,
                4,
                3,
                6
            ],
        ];
    }
    
    public function invalidIsSameScoreDifferenceProvider() {
        return [
            [
                1,
                1,
                1,
                2
            ],
            [
                0,
                0,
                4,
                0
            ],
        ];
    }
    
    public function validIsSameTendencyProvider() {
        return [
            [
                2,
                1,
                6,
                0
            ],
            [
                1,
                3,
                1,
                2
            ],
            [
                100,
                50,
                150,
                100
            ],
        ];
    }
    
    public function invalidIsSameTendencyProvider() {
        return [
            [
                2,
                1,
                0,
                6
            ],
            [
                1,
                3,
                2,
                1
            ],
            [
                50,
                100,
                150,
                100
            ],
        ];
    }
        
    /**
     * @covers App\BettingGame\BetResultAnalyzer::setRealResult
     */
    public function testSetRealResult() {
        $this->assertNull($this->object->setRealResult(1, 0));
    }
    
    /**
     * @covers App\BettingGame\BetResultAnalyzer::setRealResult
     * @dataProvider invalidArgumentResultProvider
     * @expectedException \InvalidArgumentException
     */
    public function testSetRealResultWithInvalidArgument($intRealHomeScore, $intRealAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::setBetResult
     */
    public function testSetBetResult() {
        $this->assertNull($this->object->setBetResult(1, 0));
    }
    
    /**
     * @covers App\BettingGame\BetResultAnalyzer::setBetResult
     * @dataProvider invalidArgumentResultProvider
     * @expectedException \InvalidArgumentException
     */
    public function testSetBetResultWithInvalidArgument($intRealHomeScore, $intRealAwayScore) {
        $this->object->setBetResult($intRealHomeScore, $intRealAwayScore);
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isExactResult
     * @dataProvider validIsExactResultProvider
     */
    public function testIsExactResult($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertTrue($this->object->isExactResult());
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isExactResult
     * @dataProvider invalidIsExactResultProvider
     */
    public function testIsExactResultWithInvalid($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertFalse($this->object->isExactResult());
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isSameScoreDifference
     * @dataProvider validIsSameScoreDifferenceProvider
     */
    public function testIsSameScoreDifference($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertTrue($this->object->isSameScoreDifference());
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isSameScoreDifference
     * @dataProvider invalidIsSameScoreDifferenceProvider
     */
    public function testIsSameScoreDifferenceWithInvalid($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertFalse($this->object->isSameScoreDifference());
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isSameTendency
     * @dataProvider validIsSameTendencyProvider
     */
    public function testIsSameTendency($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertTrue($this->object->isSameTendency());
    }

    /**
     * @covers App\BettingGame\BetResultAnalyzer::isSameTendency
     * @dataProvider invalidIsSameTendencyProvider
     */
    public function testIsSameTendencyWithInvalid($intRealHomeScore, $intRealAwayScore, $intBetHomeScore, $intBetAwayScore) {
        $this->object->setRealResult($intRealHomeScore, $intRealAwayScore);
        $this->object->setBetResult($intBetHomeScore, $intBetAwayScore);
        $this->assertFalse($this->object->isSameTendency());
    }

}